{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#seerbits-api-sdk-for-laravel","title":"SeerBit's API SDK for Laravel","text":"<p>SeerBit PHP SDK for easy integration with SeerBit's API.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>This package can be used with Laravel 5.8 or higher PHP 8.0 or higher</p>"},{"location":"#installation","title":"Installation","text":"<p>The preferred method is via composer. Follow the composer installation instructions if you do not already have composer installed.</p> <p>Once composer is installed, execute the following command in your project root to install this library:</p> <pre><code>composer require seerbit/seerbit-laravel\n</code></pre> <p>The service provider will automatically register itself.</p> <p>You can publish the config file with:</p> <pre><code> php artisan vendor:publish --provider=\"SeerbitLaravel\\SeerbitServiceProvider\" --tag=\"config\"\n</code></pre> <p>This is the contents of the config file that will be published to your app's directory path <code>config/seerbit.php</code>:</p> <pre><code>return [\n    'environment' =&gt; env('SEERBIT_ENVIRONMENT', \\Seerbit\\Environment::LIVE),\n    'public_key' =&gt; env('SEERBIT_PUBLIC_KEY'),\n    'secret_key' =&gt; env('SEERBIT_SECRET_KEY'),\n    'token' =&gt; env('SEERBIT_TOKEN'),\n];\n\n</code></pre>"},{"location":"#_1","title":"Home","text":"<p>You can find both public and secret keys from your merchant dashboard.</p> <p>The token can be generated following the guides here</p> <p>Replace them by changes the key values in your .env file.</p> <p>Open your .env file and add your public key, secret key and token:</p> <pre><code>SEERBIT_PUBLIC_KEY=xxxxxxxxxxxxx\nSEERBIT_SECRET_KEY=xxxxxxxxxxxxx\nSEERBIT_TOKEN=xxxxxxxxxxxxx\n</code></pre> <p>If you are using a cloud hosting service such as lambda, etc, you may need to add the above details to your environment variables section.</p> <pre><code>ENSURE YOU DO NOT PUBLISH YOUR ENV FILE TO YOUR GIT REPOSITORY\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#standard-checkout","title":"Standard checkout","text":"<pre><code>namespace App\\Http\\Controllers;\n\nuse SeerbitLaravel\\Facades\\Seerbit;\n\nclass Standard\n{\n        public function Checkout(){\n            try{\n            $uuid = bin2hex(random_bytes(6));\n            $transaction_ref = strtoupper(trim($uuid));\n\n            $payload = [\n                \"amount\" =&gt; \"1000\",\n                \"callbackUrl\" =&gt; \"http:yourwebsite.com\",\n                \"country\" =&gt; \"NG\",\n                \"currency\" =&gt; \"NGN\",\n                \"email\" =&gt; \"customer@email.com\",\n                \"paymentReference\" =&gt; $transaction_ref,\n                \"productDescription\" =&gt; \"product_description\",\n                \"productId\" =&gt; \"64310880-2708933-427\"\n            ];\n\n            $trans = seerbit()-&gt;Standard()-&gt;Initialize($payload);\n            //Or with Facade\n            $trans = SeerBit::Standard()-&gt;Initialize($payload);\n\n        }catch (\\Exception $e){\n           ;\n        }\n}\n</code></pre> <p>Full documentation can be found here</p> <p></p>"},{"location":"#configure-logger","title":"Configure Logger","text":"<pre><code>//Set Logger path in environment config file\nSEERBIT_LOGGER_PATH = \"\"\n</code></pre>"},{"location":"#api-documentation","title":"API Documentation","text":"<ul> <li>https://doc.seerbit.com/</li> </ul>"},{"location":"#changelog","title":"Changelog","text":"<p>Please see CHANGELOG for more information what has changed recently.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We strongly encourage you to join us in contributing to this repository so everyone can benefit from: * New features and functionality * Resolved bug fixes and issues * Any general improvements</p>"},{"location":"#security","title":"Security","text":"<p>If you discover any security related issues, please email developers@seerbit.com instead of using the issue tracker.</p>"},{"location":"#credits","title":"Credits","text":"<ul> <li>Victor Osas Ighalo</li> </ul>"},{"location":"#license","title":"License","text":"<p>The MIT License (MIT). Please see License File for more information.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#200-2023-02-28","title":"2.0.0 - 2023-02-28","text":"<ul> <li>This version updates support for PHP version 8.0 and above</li> </ul>"},{"location":"CHANGELOG/#201-2023-03-02","title":"2.0.1 - 2023-03-02","text":"<ul> <li>Minor updates and bug fixes</li> </ul>"},{"location":"LICENSE/","title":"LICENSE","text":"<p>MIT License</p> <p>Copyright (c) SeerBit</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"account/","title":"Account","text":"<p>This service provides access to making secure transactions by collecting the shoppers bank account details and process the payment.</p>"},{"location":"account/#authorize","title":"Authorize","text":"<pre><code>try{\n$uuid = bin2hex(random_bytes(6));\n$transaction_ref = strtoupper(trim($uuid));\n\n$payload = [\n   \"amount\" =&gt; \"1000.00\", \n   \"accountName\" =&gt; \"Customer Bank Account Name\", \n   \"accountNumber\" =&gt; \"1234567890\", \n   \"bankCode\" =&gt; \"033\", \n   \"currency\" =&gt; \"NGN\", \n   \"country\" =&gt; \"NG\", \n   \"email\" =&gt; \"customer@email.com\" ,\n   \"paymentReference\" =&gt; $transaction_ref\n]; \n\n$trans = SeerBit::Account()-&gt;Authorize($payload);\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"account/#banks-list","title":"Banks List","text":"<pre><code>try{\n$trans = SeerBit::Resources()-&gt;Banks();\n}catch (\\Exception $e){\n}\n\n</code></pre>"},{"location":"card/","title":"Card","text":"<p>This service provides access to making secure transactions by collecting the shoppers card details and process payment using pre-authentication approach and immediate charge.</p>"},{"location":"card/#authorize-one-time","title":"Authorize One Time","text":"<p>Authorize and Tokenize a transaction before capturing. The card will be tokenized automatically after a successful transaction.</p> <pre><code>try{\n$uuid = bin2hex(random_bytes(6));\n$transaction_ref = strtoupper(trim($uuid));\n\n$payload = [\n\"currency\" =&gt; \"KES\", \n\"country\" =&gt; \"KE\", \n\"cardNumber\" =&gt; \"5123450000000008\", \n\"expiryMonth\" =&gt; \"06\", \n\"expiryYear\" =&gt; \"21\", \n\"amount\" =&gt; \"100.00\", \n\"cvv\" =&gt; \"100\", \n\"email\" =&gt; \"anonshopper@gmail.com\", \n\"fullName\" =&gt; \"Anonymous Shopper\",\n\"paymentReference\" =&gt; $transaction_ref\n];\n\n$trans = SeerBit::Card()-&gt;AuthorizeOnetime($payload);\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"card/#authorize-with-token","title":"Authorize With Token","text":"<p>Authorize a transaction with a customer token before capturing</p> <pre><code>try{\n$uuid = bin2hex(random_bytes(6));\n$transaction_ref = strtoupper(trim($uuid));\n\n$payload = [\n\"currency\" =&gt; \"KES\", \n\"country\" =&gt; \"KE\", \n\"cardToken\" =&gt; \"tk_1d67fb8a-ee8f-4fad-80e7-c30d2d\", \n\"amount\" =&gt; \"100.00\", \n\"email\" =&gt; \"anonshopper@gmail.com\", \n\"fullName\" =&gt; \"Anonymous Shopper\",\n\"paymentReference\" =&gt; $transaction_ref \n];\n\n$trans = SeerBit::Card()-&gt;AuthorizeWithToken($payload);\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"card/#captutue","title":"Captutue","text":"<p>Capture an authorized transaction</p> <pre><code>try{\n\n$payload = [\n\"currency\" =&gt; \"KES\", \n\"country\" =&gt; \"KE\",\n\"amount\" =&gt; \"100.00\",\n\"paymentReference\" =&gt; \"captured_transaction_reference\" \n];\n\n$trans = SeerBit::Card()-&gt;Capture($payload);\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"card/#cancel","title":"Cancel","text":"<p>Cancel an authorized transaction</p> <pre><code>try{\n\n$payload = [\n\"currency\" =&gt; \"KES\", \n\"country\" =&gt; \"KE\",\n\"amount\" =&gt; \"100.00\",\n\"paymentReference\" =&gt; \"captured_transaction_reference\" \n];\n\n$trans = SeerBit::Card()-&gt;Cancel($payload);\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"card/#refund","title":"Refund","text":"<p>Refund an authorized transaction</p> <pre><code>try{\n\n$payload = [\n\"currency\" =&gt; \"KES\", \n\"country\" =&gt; \"KE\",\n\"amount\" =&gt; \"100.00\",\n\"paymentReference\" =&gt; \"captured_transaction_reference\" \n];\n\n$trans = SeerBit::Card()-&gt;Refund($payload);\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"card/#tokenize","title":"Tokenize","text":"<p>Tokenize customer's card</p> <pre><code>try{\n\n$uuid = bin2hex(random_bytes(6));\n$transaction_ref = strtoupper(trim($uuid));\n\n$payload = [\n   \"fullName\" =&gt; \"Victor Ighalo\", \n   \"currency\" =&gt; \"KES\", \n   \"country\" =&gt; \"KE\", \n   \"cardNumber\" =&gt; \"5123450000000008\", \n   \"expiryMonth\" =&gt; \"06\", \n   \"expiryYear\" =&gt; \"21\",\n   \"paymentReference\" =&gt; $transaction_ref  \n]; \n\n$trans = SeerBit::Card()-&gt;Tokenize($payload);\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"card/#non-3ds-direct-debit-plus-tokenization","title":"Non 3DS Direct Debit plus tokenization","text":"<p>Debit a customer's card without 3DS authentication process.  The card will be tokenized automatically after a successful transaction.</p> <pre><code>try{\n\n$uuid = bin2hex(random_bytes(6));\n$transaction_ref = strtoupper(trim($uuid));\n\n$payload = [\n   \"fullName\" =&gt; \"Victor Ighalo\", \n   \"currency\" =&gt; \"KES\", \n   \"country\" =&gt; \"KE\", \n   \"cardNumber\" =&gt; \"5123450000000008\", \n   \"expiryMonth\" =&gt; \"06\", \n   \"expiryYear\" =&gt; \"21\",\n   \"paymentReference\" =&gt; $transaction_ref  \n]; \n\n$trans = SeerBit::Card()-&gt;Non3DSOneTime($payload);\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"card/#non-3ds-direct-debit-with-token","title":"Non 3DS Direct Debit with token","text":"<p>Debit a customer's card without 3DS authentication process.</p> <pre><code>try{\n\n$uuid = bin2hex(random_bytes(6));\n$transaction_ref = strtoupper(trim($uuid));\n\n$payload = [\n   \"amount\" =&gt; \"1000.00\", \n   \"fullName\" =&gt; \"john doe\", \n   \"currency\" =&gt; \"NGN\", \n   \"country\" =&gt; \"NG\", \n   \"email\" =&gt; \"johndoe@gmail.com\", \n   \"cardToken\" =&gt; \"tk_e4cae021-e2ce-4b59-9b1e-3f859cefd\" \n];  \n\n$trans = SeerBit::Card()-&gt;Non3DSWithToken($payload);\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"mobile_money/","title":"Mobile money","text":"<p>This service provides access to making secure transactions through mobile mney channels. It is an e-wallet payment method in Africa which allows you to accept payments from your customers with their mobile money wallets.</p>"},{"location":"mobile_money/#authorize","title":"Authorize","text":"<pre><code>try{\n$uuid = bin2hex(random_bytes(6));\n$transaction_ref = strtoupper(trim($uuid));\n\n$payload = [\n   \"fullName\" =&gt; \"john doe\", \n   \"email\" =&gt; \"johndoe@gmail.com\", \n   \"mobileNumber\" =&gt; \"08022343345\", \n   \"currency\" =&gt; \"GHS\", \n   \"country\" =&gt; \"GH\", \n   \"network\" =&gt; \"MTN\", \n   \"amount\" =&gt; \"10.01\", \n   \"paymentType\" =&gt; \"MOMO\",\n   \"paymentReference\" =&gt; $transaction_ref \n]; \n\n$trans = SeerBit::Momo()-&gt;Authorize($payload);\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"mobile_money/#networks","title":"Networks","text":"<p>A list of available mobile money payment networks</p> <pre><code>try{\n\n$trans = SeerBit::Momo()-&gt;Networks();\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"order/","title":"Order","text":"<p>Order objects are created to handle purchases of previously defined products. You can create and pay for bulk orders.</p>"},{"location":"order/#create","title":"Create","text":"<p>Create an order</p> <pre><code>try{\n$uuid = bin2hex(random_bytes(6));\n$transaction_ref = strtoupper(trim($uuid));\n\n$payload = [\n   \"email\" =&gt; \"customer@email.com\", \n   \"fullName\" =&gt; \"John Doe\", \n   \"orderType\" =&gt; \"BULK_BULK\", \n   \"callbackUrl\" =&gt; \"https://yourdomain.com\", \n   \"country\" =&gt; \"NG\", \n   \"currency\" =&gt; \"NGN\", \n   \"amount\" =&gt; \"1400\", \n   \"paymentReference\" =&gt; $transaction_ref\n   \"orders\" =&gt; [\n         [\n            \"orderId\" =&gt; \"22S789420214623\", \n            \"currency\" =&gt; \"NGN\", \n            \"amount\" =&gt; \"500.00\", \n            \"productId\" =&gt; \"fruits\", \n            \"productDescription\" =&gt; \"mango\" \n         ], \n         [\n               \"orderId\" =&gt; \"1a3sa82748272556947\", \n               \"currency\" =&gt; \"NGN\", \n               \"amount\" =&gt; \"900.00\", \n               \"productId\" =&gt; \"fruits\", \n               \"productDescription\" =&gt; \"orange\" \n            ] \n      ] \n]; \n\n$trans = SeerBit::Order()-&gt;Create($payload);\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"recurrent/","title":"Recurrent","text":"<p>Recurring payments are scheduled payments to pay for products or services that require payments on a regular basis. For example, a cardholder paying an on-demand movie or music streaming provider's subcription fee either weekly, monthly or annually.</p>"},{"location":"recurrent/#create","title":"Create","text":"<p>Create a subscription</p> <pre><code>try{\n$uuid = bin2hex(random_bytes(6));\n$transaction_ref = strtoupper(trim($uuid));\n\n$payload =  [\n   \"cardNumber\" =&gt; \"2223000000000007\", \n   \"expiryMonth\" =&gt; \"05\", \n   \"callbackUrl\" =&gt; \"https://callback.url.com\", \n   \"expiryYear\" =&gt; \"21\", \n   \"cvv\" =&gt; \"100\", \n   \"amount\" =&gt; \"20\", \n   \"currency\" =&gt; \"NGN\", \n   \"productDescription\" =&gt; \"Medium HM\", \n   \"productId\" =&gt; \"mhmo\", \n   \"country\" =&gt; \"NG\", \n   \"startDate\" =&gt; \"2019-01-11\", \n   \"cardName\" =&gt; \"Bola Olat\", \n   \"billingCycle\" =&gt; \"DAILY\", \n   \"email\" =&gt; \"customer@email.com\", \n   \"customerId\" =&gt; \"199721652416534\", \n   \"billingPeriod\" =&gt; \"4\",\n   \"paymentReference\" =&gt; $transaction_ref\n];\n\nSeerBit::Recurrent()-&gt;CreateSubscription($payload);\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"recurrent/#charge","title":"Charge","text":"<p>Charge a subscription</p> <pre><code>try{\n\n$payload =  [\n   \"amount\" =&gt; \"20\", \n   \"currency\" =&gt; \"NGN\", \n   \"email\" =&gt; \"customer@email.com\", \n   \"paymentReference\" =&gt; \"REF_USED_TO_CREATE_A_SUBSCRIPTION\", \n   \"authorizationCode\" =&gt; \"54570064E849\" \n]; \n\nSeerBit::Recurrent()-&gt;ChargeSubscription($payload);\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"recurrent/#get-all-subscriptions-list","title":"Get all Subscriptions list","text":"<pre><code>try{\n\nSeerBit::Recurrent()-&gt;GetMerchantSubscription();\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"recurrent/#get-customer-subscription","title":"Get Customer subscription","text":"<pre><code>try{\n\nSeerBit::Recurrent()-&gt;GetCustomerSubscription($customerId);\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"recurrent/#update-a-subscription","title":"Update a subscription","text":"<pre><code>try{\n\n$payload =  [\n   \"amount\" =&gt; \"20\", \n   \"currency\" =&gt; \"NGN\", \n   \"country\" =&gt; \"NG\", \n   \"status\" =&gt; \"INACTIVE\", \n   \"email\" =&gt; \"customer@email.com\", \n   \"billingId\" =&gt; \"199721652416534\", \n   \"mobileNumber\" =&gt; \"09339993322\" \n];\n\nSeerBit::Recurrent()-&gt;UpdateSubscription($payload);\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"recurrent/#validate-subscription-status","title":"Validate subscription status","text":"<pre><code>try{\n//billingId is gotten from a subscription\nSeerBit::Recurrent()-&gt;ValidateStatus($billingId);\n\n}catch (\\Exception $e){\n\n}\n\n</code></pre>"},{"location":"standard/","title":"Standard","text":"<p>This service provides access to making secure transactions by generating a checkout link. With the link, you can then decide to redirect automatically or allow your shoppers to click a button before redirecting.</p> <p>Add the NameSpace: SeerbitLaravel\\Facades\\Seerbit to your Class or Controller or Route in case you want to use the Facade.</p>"},{"location":"standard/#initialize-transaction","title":"Initialize transaction","text":"<pre><code>namespace App\\Http\\Controllers;\n\nuse SeerbitLaravel\\Facades\\Seerbit;\n\nclass Standard\n{\n\n    public function Checkout(){\n        try{\n\n            $uuid = bin2hex(random_bytes(6));\n            $transaction_ref = strtoupper(trim($uuid));\n\n            $payload = [\n                \"amount\" =&gt; \"1000\",\n                \"callbackUrl\" =&gt; \"http:yourwebsite.com\",\n                \"country\" =&gt; \"NG\",\n                \"currency\" =&gt; \"NGN\",\n                \"email\" =&gt; \"customer@email.com\",\n                \"paymentReference\" =&gt; $transaction_ref,\n                \"productDescription\" =&gt; \"product_description\",\n                \"productId\" =&gt; \"64310880-2708933-427\",\n                \"tokenize\" =&gt; true //optional\n            ];\n\n            $trans = seerbit()-&gt;Standard()-&gt;Initialize($payload);\n            // or $trans = SeerBit::Standard()-&gt;Initialize($payload);\n            response()-&gt;redirectTo(trans-&gt;data-&gt;payments-&gt;redirectLink);\n\n        }catch (\\Exception $e){\n\n        }\n    }\n}\n</code></pre>"},{"location":"standard/#validate-transaction","title":"Validate transaction","text":"<pre><code>namespace App\\Http\\Controllers;\n\nuse SeerbitLaravel\\Facades\\Seerbit;\n\nclass Standard\n{\n\n    public function Validate($trans_ref){\n        try{\n            $response = SeerBit::Standard()-&gt;ValidateStatus($trans_ref);\n\n\n        }catch (\\Exception $e){\n\n        }\n    }\n}\n</code></pre>"},{"location":"tokenization/","title":"Tokenization","text":"<p>The Card Tokenize and Charge API allows you to charge a tokenized payment.</p> <p>Add the NameSpace: SeerbitLaravel\\Facades\\Seerbit to your Class or Controller or Route in case you want to use the Facade.</p>"},{"location":"tokenization/#create-token","title":"Create Token","text":""},{"location":"tokenization/#tokenize-a-card","title":"Tokenize a card","text":"<pre><code>try{\n$uuid = bin2hex(random_bytes(6));\n$transaction_ref = strtoupper(trim($uuid));\n\n$payload =  [\n   \"amount\": \"100.00\",        \n   \"fullName\": \"Anonymous Shopper\",\n   \"mobileNumber\": \"03447522256\",\n   \"currency\": \"NGN\",\n   \"country\": \"NG\",\n   \"email\": \"anonshopper@gmail.com\",\n   \"paymentType\": \"CARD\",\n   \"cardNumber\": \"6280511000000095\",\n   \"expiryMonth\": \"12\",\n   \"expiryYear\": \"26\",\n   \"cvv\": \"123\",\n   \"pin\": \"1234\",\n   \"tokenize\": true,\n   \"paymentReference\" =&gt; $transaction_ref\n];\n\n$tokenization_result = SeerBit::Tokenization()-&gt;CreateToken($payload);\n\n}catch (\\Exception $e){\necho $e-&gt;getMessage();\n}\n\n</code></pre>"},{"location":"tokenization/#get-token","title":"Get Token","text":""},{"location":"tokenization/#get-details-of-tokenized-card","title":"Get details of tokenized card","text":"<pre><code>try{\n\n//transaction reference used when creating a token\nSeerBit::Tokenization()-&gt;GetToken($transaction_reference);\n\n}catch (\\Exception $e){\necho $e-&gt;getMessage();\n}\n\n</code></pre>"},{"location":"tokenization/#charge-a-token","title":"Charge a Token","text":""},{"location":"tokenization/#charge-a-card-with-its-association-token","title":"Charge a card with its association token","text":"<pre><code>try{\n$uuid = bin2hex(random_bytes(6));\n$transaction_ref = strtoupper(trim($uuid));\n\n//authorizationCode is a property in the response payload of GetToken\n$payload =  [\n \"paymentReference\" =&gt; $transaction_ref, \n \"authorizationCode\" =&gt; \"authorizationCode\", \n \"amount\" =&gt; \"100.00\"\n];\n\n$tokenization_result = SeerBit::Tokenization()-&gt;ChargeToken($payload);\n\n}catch (\\Exception $e){\necho $e-&gt;getMessage();\n}\n\n</code></pre>"},{"location":"tokenization/#charge-a-token-bulk","title":"Charge a Token Bulk","text":""},{"location":"tokenization/#charge-tokens-in-a-batch","title":"Charge tokens in a batch","text":"<pre><code>try{\n$uuid = bin2hex(random_bytes(6));\n$transaction_ref = strtoupper(trim($uuid));\n\n//authorizationCode is a property in the response payload of GetToken\n//$transaction_ref should be unique for each record\n $payload = [\n  (object)[\n   'authorizationCode' =&gt; $authorizationCode,\n   'paymentReference' =&gt; $transaction_ref,\n   'amount' =&gt; '100.00',\n   'publicKey' =&gt; 'MERCHANT_PUBLIC_KEY'\n   ]\n ];\n\n$tokenization_result = SeerBit::Tokenization()-&gt;ChargeTokenBulk($payload);\n\n}catch (\\Exception $e){\necho $e-&gt;getMessage();\n}\n\n</code></pre>"}]}